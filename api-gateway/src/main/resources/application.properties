server.port=9191
spring.application.name=API-GATEWAY
eureka.instance.client.serverUrl.defaultZone=http://localhost:8761/eureka/
management.endpoints.web.exposure.include=*

## Cross Origin properties for react app:
spring.cloud.gateway.globalcors.corsConfigurations.[/**].allowedOrigins=*
spring.cloud.gateway.globalcors.corsConfigurations.[/**].allowedMethods=GET,POST,PUT,DELETE

### AUTOMATIC ROUTING OF THE REGISTERED MICROSERVICES - Not preferred!
### Flag that enables DiscoveryClient gateway integration.
#spring.cloud.gateway.discovery.locator.enabled = true
#spring.cloud.gateway.discovery.locator.lower-case-service-id = true
### debug logs of the automatic mappings
#logging.level.org.springframework.cloud.gateway.handler.RoutePredicateHandlerMapping=DEBUG
### reason of not being preferred is that, using the automatic routing makes the difficulty in readability
### of the configurations and we need to use the 'serviceID' in every REST API (urls)
### i.e. http://localhost:9191/department-service/api/departments/IT001
### i.e. http://localhost:9191/employee-service/api/employees/6

## MANUAL ROUTING OF THE REGISTERED MICROSERVICES - Mostly Preferred! - API GATEWAY USING SPRING CLOUD
## Route for the Employee Service
spring.cloud.gateway.routes[0].id=EMPLOYEE-SERVICE
## lb represents the Load Balancing, EMPLOYEE-SERVICE is the service id that is registered with registry server
## that's spring.application.name property, we can use url=http://localhost:8081 with loadBalancing.
spring.cloud.gateway.routes[0].uri=lb://EMPLOYEE-SERVICE
## path contains the destination url (see in employee controller)
## i.e whenever user makes request to => http://localhost:9191/api/employees , api gateway will redirect request to employee service.
## '**' means after /, we can anything
spring.cloud.gateway.routes[0].predicates[0]=Path=/api/employees/**

## Route for the Department Service
spring.cloud.gateway.routes[1].id=DEPARTMENT-SERVICE
## lb represents the Load Balancing, EMPLOYEE-SERVICE is the service id that is registered with registry server
## that's spring.application.name property, we can use url=http://localhost:8080 with loadBalancing.
spring.cloud.gateway.routes[1].uri=lb://DEPARTMENT-SERVICE
## path contains the destination url (see in employee controller)
## i.e whenever user makes request to => http://localhost:9191/api/departments , api gateway will redirect request to department service.
## '**' means after /, we can anything
spring.cloud.gateway.routes[1].predicates[0]=Path=/api/departments/**

## Route for the Organization Service
spring.cloud.gateway.routes[2].id=ORGANIZATION-SERVICE
spring.cloud.gateway.routes[2].uri=lb://ORGANIZATION-SERVICE
spring.cloud.gateway.routes[2].predicates[0]=Path=/api/organizations/**

